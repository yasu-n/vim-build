#!/bin/sh
# debug
set -e
[ -n "$VIMENV_DEBUG" ] && set -x

# make file if directory is not exist
if [ ! -d "$VIMENV_ROOT"/versions ]; then
    mkdir "$VIMENV_ROOT"/versions
fi

# create download directory
VIM_SOURCE="$VIMENV_ROOT"/src
if [ -e "$VIM_SOURCE" ]; then
    rm -rf "$VIM_SOURCE"
fi
mkdir "$VIM_SOURCE"


### function
unset VIM_ARCHIVE
unset VIM_VERSION
unset TAG_NAME
unset BUILD_OPTIONS
VIM_BUILD_ROOT="$VIMENV_ROOT"/plugins/vim-build
# usage
usage() {
    echo "Usage: "
    echo "  vimenv install -l"
    echo "  vimenv install -f <SOURCE>.tar.gz [-- <BUILD_OPTIONS>]"
    echo "  vimenv install -t <TAG_NAME> [-- <BUILD_OPTIONS>]"
    echo "  vimenv install -n [-- <BUILD_OPTIONS>]"
    exit 0
}

# list tag name
print_tagname() {
    if [ -e "$VIM_BUILD_ROOT"/tags ]; then
        cat "$VIM_BUILD_ROOT"/tags | awk '{ print $2 }' | sort
    else
        echo "available version info"
        git ls-remote -t https://github.com/vim/vim.git | awk '{ print $2 }' \
            | awk -F/ '{ print $NF }' | sort
    fi
    exit 0
}

# check directory exist
exist_directory() {
    if [ -e "$VIMENV_ROOT"/versions/"$VIM_VERSION" ]; then
        echo "This directory already exists: $VIM_VERSION"
        while /usr/bin/true
        do
            echo "Do you delete directory?[yN]"
            read ans
    
            case ${ans} in
                [Yy]|[Yy][Ee][Ss])
                    rm -rf "$VIMENV_ROOT"/versions/"$VIM_VERSION"
                    break
                    ;;
                [Nn]|[Nn][Oo])
                    exit 0
                    ;;
                *)
                    ;;
            esac
        done
    fi
}

# download latest version
download_latest() {
    VIM_VERSION="latest"
    exist_directory
    git clone https://github.com/vim/vim.git "$VIM_SOURCE"
    cd "$VIM_SOURCE"
}

# download tagname version
download_tagname() {
    VIM_VERSION="$TAG_NAME"
    exist_directory
    git clone https://github.com/vim/vim.git -b "$TAG_NAME" "$VIM_SOURCE"
}

# extract archive 
extract_archive() {
    VIM_VERSION="vim"
    exist_directory
    tar xvf "$VIM_ARCHIVE" -C "$VIM_SOURCE"
    cd $(find "$VIM_SOURCE" -mindepth 1 -maxdepth 1 -type d | sed 1q)
    cp -Rp ./ "$VIM_SOURCE"
}

# configure
configure() {
    ./configure --prefix="$VIMENV_ROOT"/versions/"$VIM_VERSION" $BUILD_OPTIONS >> $HOME/build.log
}

# remove source directory
clean() {
    if [ -e "$VIM_SOURCE" ]; then
        rm -rf "$VIM_SOURCE"
    fi
}


### set options
while getopts ":f:t:nl" OPT
do
    case $OPT in
        f)
            VIM_ARCHIVE="$OPTARG"
            if [ ! -n "$VIM_ARCHIVE" ];then
                usage
            fi
            extract_archive
            ;;
        t)
            TAG_NAME="$OPTARG"
            if [ ! -n "$TAG_NAME" ]; then
                usage
            fi
            download_tagname
            ;;
        n)
            download_latest
            ;;
        l)
            print_tagname
            ;;
        :)
            echo "${0}: option requires an -$OPTARG"
            usage
            ;;
        \?)
            echo "${0}: illegal option -$OPTARG"
            usage
            ;;
    esac
done


### delete options
shift `expr $OPTIND - 1`

### set argument
BUILD_OPTIONS="$@"

### exit trap
trap clean EXIT

### configure, make, make install
cd "$VIM_SOURCE"
echo "$BUILD_OPTIONS" > ~/build.log
configure && make -f "$VIM_SOURCE"/Makefile && make install && clean

